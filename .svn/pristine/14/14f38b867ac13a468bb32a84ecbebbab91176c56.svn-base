<template>
  <div class="project_process">
     <div class="project_process_top">
       <ul>
         <li @click="processClick">分配窗型施工工序</li>
         <li>复制窗型</li>
         <li @click="submit">保存</li>
       </ul>
     </div>
     <div class="project_process_conter">
       <div class="left">
         <div class="message">
           <div class="messagenav">
             快速查询
           </div>
         </div>
         <el-select v-model="queryParams.winModelId" placeholder="请选择项目名称" @change="querywinNo" clearable style="padding: 20px; padding-top: 10px;">
           <el-option v-for="dict in AllwinModelCode" :key="dict.winModelId" :label="dict.winModelCode+ ' (' + dict.winModelName +')' " :value="dict.winModelId " />
         </el-select>
       </div>
       <div class="right">

           <el-table
             height="100%"
             :data="tableData"
             style="width: 100%;margin-bottom: 20px;"
             row-key="processNormId"
             border
             default-expand-all
             :tree-props="{children: 'children', hasChildren: 'hasChildren'}">
             <el-table-column
               prop="processNormName"
               label="工序名称"
               >
             </el-table-column>
             <el-table-column
               label="数量"
              >
              <template slot-scope="scope">

                 <el-input v-model="scope.row.num" :placeholder ="'请输入 ' +  scope.row.processNormName  + ' 数量'"></el-input>
                        </template>

             </el-table-column>
           </el-table>

       </div>
     </div>
     <!-- 用户导入对话框 -->
     <el-dialog title="分配窗型施工工序" :visible.sync="dialogVisible" append-to-body>
      窗型：   <el-select v-model="queryParams.winModelId" :disabled="true">
           <el-option v-for="dict in AllwinModelCode" :key="dict.winModelId" :label="dict.winModelCode+ ' (' + dict.winModelName +')' " :value="dict.winModelId " />
         </el-select>
         
         <el-tree
           :data="data"
           :props="defaultProps"
           show-checkbox
            @node-click="handleNodeClick"></el-tree>
           <div slot="footer" class="dialog-footer">
             <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
             <el-button @click="dialogVisible = false">取 消</el-button>
           </div>
         </el-dialog>
  </div>
</template>

<script>
  import {
    Allwindow,
    project_processList,
    project_processEdit,
    processTreeList
  } from  "@/api/project/project_process.js";
  export default{
    name:'project_process',
    data(){
       return{
         dialogVisible:false,
         // 全部窗型数据
         AllwinModelCode:[],
         queryParams:{
           winModelCode:undefined,
           winModelId:undefined
         },
          // 菜单数据结构
          tableData:[],
          // 表格树数据
          data: [],
                  defaultProps: {
                    children: 'children',
                    label: 'name'
                  },

       }
    },
    created() {
      this.getList()

    },
    methods:{
        handleNodeClick(data) {
              console.log(data);
            },
      getList(){
        Allwindow().then(res =>{
         this.AllwinModelCode = res.data
        })
      },
   querywinNo(){
     const winModelId  = {
       winModelId:this.queryParams.winModelId
     }
       project_processList(winModelId).then(res =>{
         this.tableData = this.handleTree(res.data ,"processNormId")
         this.tableData = res.data
       
         console.log(this.tableData)
       })
   },
   processClick(){
     this.dialogVisible = true


     const winModelId  = {
       winModelId:this.queryParams.winModelId
     }
     processTreeList(winModelId).then(res =>{
      let data1 = res.data;//后台初始数据
                  function setTreeData(arr) {
                      // 删除所有的children,以防止多次调用
                      arr.forEach(function(item) {
                          delete item.children;
                      });
                      let map = {}; //构建map
                      arr.forEach(i => {
                          map[i.id] = i; //构建以id为键 当前数据为值
                      });
                      let treeData = [];
                      arr.forEach(child => {
                          const mapItem = map[child.pId]; //判断当前数据的parentId是否存在map中
                          if (mapItem) {
                              //存在则表示当前数据不是最顶层的数据
                              //注意： 这里的map中的数据是引用了arr的它的指向还是arr,当mapItem改变时arr也会改变，踩坑点
                              (mapItem.children || (mapItem.children = [])).push(child); //这里判断mapItem中是否存在child
                          } else {
                              //不存在则是顶层数据
                              treeData.push(child);
                          }
                      });
                      return treeData;
                  }
               this.data =  setTreeData(data1)
               console.log(res)


     })
   },
     submit(){
       project_processEdit(this.tableData).then(res =>{
         this.querywinNo()
         if(res.code == 200){
         this.$message({
          message: '保存成功',
          type: 'success'
        });

         }
       })
       // const projectProcessList = []
       // const projectProcessListchildren = []
       // // processId： 工序ID
       // // winModelId：窗型ID
       // // num:数量
       // // processNormName：工序名称
       // // winModelCodeAndName：AWM001(AWM001) 窗型编码和名称

       //  // projectProcessList.processId =


     }
    },
    mounted(){
        $.fn.zTree.init($("#trees"), this.setting, this.tableData);
    },
  }
</script> 

<style scoped="scoped">
  .project_process {
    width: 100%;
    height: 100%;
  }

  .project_process_top {
    background-image: linear-gradient(#5692cf, #00356c);
    height: 40px;
    width: 100%;
    padding: 5px;
  }

  .project_process_top ul li {
    float: left;
    line-height: 28px;
    color: white;
    border: 1px solid #5681af;
    font-size: 0.75rem;
    height: 28px;
    min-width: 58px;
    text-align: center;
    border-radius: 5px;
    background-image: linear-gradient(#71a1d2, #174f89);
    cursor: pointer;
    margin-left: 12px;
  }
  .project_process_conter {
    background-color: #FFFFFF;
    width: 100%;
    height: 100%;
    border: 1px solid #c0c0c0;
    display: flex;
  }
  .left {
    width: 16%;
    height: 100%;
    background-color: #efefef;
    font-size: 0.875rem;
  }
  .right {
    width: 84%;
    height: 82%;
  }
.message {
    width: 100%;
    height: 30px;
    line-height: 30px;
    font-size: 0.75rem;
    background-image: linear-gradient(#fdfdfe, #cfd0d1);
    padding-left: 10px;
    display: flex;
    justify-content: space-between;
    padding-right: 10px;

  }

  .messagenav {
    color: #2a5b8c;
    font-weight: 900;

  }
</style>
