<template>
  <div class="dictionaries">
    <div class="dictionaries_top">
      <ul v-show="show">
        <li @click="handleAdd"  v-hasPermi="['system:dict:add']">新增</li>
        <li :class="{'notChoose' : single}" :disabled="single" @click="handleUpdate" v-hasPermi="['system:dict:edit']">修改</li>
        <li :class="{'notChoose' : multiple}" :disabled="multiple" @click="handleDelete" v-hasPermi="['system:dict:remove']">删除</li>
        <li @click="handleExport" v-hasPermi="['system:dict:export']">导出</li>
      </ul>
      <ul v-show="!show">
        <li @click="submitForm">保存</li>
        <li @click="cancel">取消</li>
      </ul>
    </div>
    <div class="dictionaries_conter">
      <el-form ref="form" :model="form" :rules="rules" label-width="84px" v-show="!show">
        <el-row>
          <el-col :span="24">
            <el-form-item label="字典名称:" prop="dictName">
                <el-input v-model="form.dictName" placeholder="请输入字典名称" />
              </el-form-item>
          </el-col>
           <el-col :span="24">
             <el-form-item label="字典类型:" prop="dictType">
                <el-input v-model="form.dictType" placeholder="请输入字典类型" />
              </el-form-item>
           </el-col>
              <el-col :span="24">
                <el-form-item label="状态:" prop="status">
                <el-radio-group v-model="form.status">
                  <el-radio
                    v-for="dict in statusOptions"
                    :key="dict.dictValue"
                    :label="dict.dictValue"
                  >{{dict.dictLabel}}</el-radio>
                </el-radio-group>
              </el-form-item>
              </el-col>
              <el-col :span="24">
                <el-form-item label="备注:" prop="remark">
                <el-input v-model="form.remark" type="textarea" placeholder="请输入内容"></el-input>
              </el-form-item>
              </el-col>

        </el-row>

            </el-form>
      <div class="left" v-show="show">
        <div class="message">
          <div class="messagenav">
            快速查询
          </div>

        </div>
        <el-form :model="queryParams" ref="queryForm" :inline="true" label-width="80px">
          <el-form-item label="字典名称:" prop="dictName">
            <el-input v-model="queryParams.dictName" placeholder="请输入字典名称" clearable size="mini" style="width: 100%"
              @keyup.enter.native="handleQuery" />
          </el-form-item>
          <el-form-item label="字典类型:" prop="dictType">
            <el-input v-model="queryParams.dictType" placeholder="请输入字典类型" clearable size="mini" style="width: 100%"
              @keyup.enter.native="handleQuery" />
          </el-form-item>
          <el-form-item label="状态:" prop="status">
            <el-select v-model="queryParams.status" placeholder="字典状态" clearable size="mini" style="width: 100%">
              <el-option v-for="dict in statusOptions" :key="dict.dictValue" :label="dict.dictLabel" :value="dict.dictValue" />
            </el-select>
          </el-form-item>
          <el-form-item label="创建时间:">
            <el-date-picker v-model="dateRange" size="mini" style="width: 100%" value-format="yyyy-MM-dd" type="daterange"
              range-separator="-" start-placeholder="开始日期" end-placeholder="结束日期"></el-date-picker>
          </el-form-item>
          <el-form-item>
            <el-button type="cyan" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
            <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
          </el-form-item>
        </el-form>
      </div>
      <div class="right" v-show="show">
        <div class="rigtop">
          查询结果
        </div>
         <el-table v-loading="loading" :data="typeList" @selection-change="handleSelectionChange"  height="100%">
               <el-table-column type="selection" width="55" align="center" />
               <el-table-column label="序号" align="center" type="index" />
               <el-table-column label="字典编号" align="center" prop="dictId" />
               <el-table-column label="字典名称" align="center" prop="dictName" :show-overflow-tooltip="true" />
               <el-table-column label="字典类型" align="center" :show-overflow-tooltip="true">
                 <template slot-scope="scope">
                   <router-link :to="'/dict/type/data/' + scope.row.dictId" class="link-type">
                     <span>{{ scope.row.dictType }}</span>
                   </router-link>
                 </template>
               </el-table-column>
               <el-table-column label="状态" align="center" prop="status" :formatter="statusFormat" />
               <el-table-column label="备注" align="center" prop="remark" :show-overflow-tooltip="true" />
               <el-table-column label="创建时间" align="center" prop="createTime" width="180">
                 <template slot-scope="scope">
                   <span>{{ parseTime(scope.row.createTime) }}</span>
                 </template>
               </el-table-column>
             </el-table>
          <!--   <pagination
               v-show="total>0"
               :total="total"
               :page.sync="queryParams.pageNum"
               :limit.sync="queryParams.pageSize"
               @pagination="getList"

             /> -->
      </div>
    </div>
  </div>
</template>

<script>
  import { listType, getType, delType, addType, updateType, exportType, clearCache } from "@/api/system/dict/type";

  export default {
    name: 'dictionaries',
    data() {
      return {
        show: true,

        // 选中数组
        ids: [],
        // 选中字典名称数组
        dictname:[],
        // 非单个禁用
        single: true,
        // 非多个禁用
        multiple: true,
        // 显示搜索条件
        showSearch: true,
        // 总条数
        total: 0,
        // 字典表格数据
        typeList: [],
        // 状态数据字典
        statusOptions: [],
        // 日期范围
        dateRange: [],
        // 查询参数
        queryParams: {
          // pageNum: 1,
          // pageSize: 10,
          dictName: undefined,
          dictType: undefined,
          status: undefined
        },
        // 表单参数
        form: {},
        // 表单校验
        rules: {
          dictName: [{
            required: true,
            message: "字典名称不能为空",
            trigger: "blur"
          }],
          dictType: [{
            required: true,
            message: "字典类型不能为空",
            trigger: "blur"
          }]
        }
      }
    },
    created() {
      this.getList();
      this.getDicts("sys_normal_disable").then(response => {
        this.statusOptions = response.data;
        // console.log(response)
      });
    },
    methods: {
      /** 查询字典类型列表 */
      getList() {
        this.loading = true;
        listType(this.addDateRange(this.queryParams, this.dateRange)).then(response => {
          this.typeList = response.rows;
          this.total = response.total;
          this.loading = false;
        });
      },
      // 字典状态字典翻译
      statusFormat(row, column) {
        return this.selectDictLabel(this.statusOptions, row.status);
      },
      // 取消按钮
      cancel() {
        this.reset();
        this.show = true
        this.noShow = false
        this.permission = false
      },
      // 表单重置
      reset() {
        this.form = {
          dictId: undefined,
          dictName: undefined,
          dictType: undefined,
          status: "0",
          remark: undefined
        };
        this.resetForm("form");
      },
      /** 搜索按钮操作 */
      handleQuery() {
        // this.queryParams.pageNum = 1;
        this.getList();
      },
      /** 重置按钮操作 */
      resetQuery() {
        this.dateRange = [];
        this.resetForm("queryForm");
        this.handleQuery();
      },
      /** 新增按钮操作 */
      handleAdd() {
        this.show = false
        this.reset();

        this.title = "添加字典类型";
      },
      // 多选框选中数据
      handleSelectionChange(selection) {
        this.ids = selection.map(item => item.dictId)
        this.dictname = selection.map(item => item.dictName)
        this.single = selection.length != 1
        this.multiple = !selection.length
      },
      /** 修改按钮操作 */
      handleUpdate(row) {
        this.show = false
        this.reset();
        const dictId = row.dictId || this.ids
        getType(dictId).then(response => {
          this.form = response.data;
          this.open = true;
          this.title = "修改字典类型";
        });
      },
      /** 提交按钮 */
      submitForm: function() {
        this.$refs["form"].validate(valid => {
          if (valid) {
            if (this.form.dictId != undefined) {
              updateType(this.form).then(response => {
                if (response.code === 200) {
                  this.msgSuccess("修改成功");
                  this.open = false;
                  this.getList();
                }
              });
            } else {
              addType(this.form).then(response => {
                if (response.code === 200) {
                  this.msgSuccess("新增成功");
                  this.open = false;
                  this.getList();
                }
              });
            }
          }
        });
      },
      /** 删除按钮操作 */
      handleDelete(row) {
        const dictIds = row.dictId || this.ids;
        this.$confirm('是否确认删除字典名称为"' + this.dictname + '"的数据项?', "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(function() {
          return delType(dictIds);
        }).then(() => {
          this.getList();
          this.msgSuccess("删除成功");
        }).catch(function() {});
      },
      /** 导出按钮操作 */
      handleExport() {
        const queryParams = this.queryParams;
        this.$confirm('是否确认导出所有类型数据项?', "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(function() {
          return exportType(queryParams);
        }).then(response => {
          this.download(response.msg);
        }).catch(function() {});
      },
    }
  }
</script>

<style scoped="scoped">
  .dictionaries{
    width: 100%;
    height: 100%;
  }
  /* 删除修改按钮是否操作 */
  .notChoose {
    opacity: 0.8;
    pointer-events: none;
  }

  /* 返回按钮样式 */
  .contop {
    width: 100%;
    height: 30px;
    background-image: linear-gradient(#ffffff, #e6e5e6);
    padding-top: 5px;
    padding-left: 20px;
  }

  .contop button {
    width: 60px;
    height: 20px;
    font-size: 12px;
    border: 1px solid #cacaca;
    border-radius: 10px 0px 10px 0px;
    color: #000000;
    outline: none;
  }

  .contop button:hover {
    background: #c5e1ff;
  }

  .dictionaries_top {
    background-image: linear-gradient(#5692cf, #00356c);
    height: 40px;
    width: 100%;

    padding: 5px;
  }

  .dictionaries_top ul li {
    float: left;
    line-height: 28px;
    color: white;
    border: 1px solid #5681af;
    font-size: 12px;
    height: 28px;
    width: 58px;
    text-align: center;
    border-radius: 5px;
    background-image: linear-gradient(#71a1d2, #174f89);
    cursor: pointer;
  }

  .dictionaries_conter {
    background-color: #FFFFFF;
    width: 100%;
    height: 100%;
    border: 1px solid #c0c0c0;
    display: flex;
  }

  /* 左侧 */
  .left {
    width: 18%;
    height: 100%;
    background-color: #efefef;
    font-size: 14px;
    border-right: 1px solid #888888;
  }

  .left_top {
    width: 100%;
    height: 40%;
  }

  .message {
    width: 100%;
    height: 30px;
    line-height: 30px;
    font-size: 12px;
    background-image: linear-gradient(#fdfdfe, #cfd0d1);
    padding-left: 10px;
    display: flex;
    justify-content: space-between;
    padding-right: 10px;

  }

  .messageli {}

  .messagenav {
    color: #2a5b8c;
    font-weight: 900;

  }

  /* 右侧 */
  .right {
    width: 82%;
    height: 88%;
    position: relative;
    /* overflow: auto; */
    padding-bottom: 62px;
  }

  /* 右侧头部 */
  .rigtop {
    width: 100%;
    height: 24px;
    line-height: 24px;
    background-image: linear-gradient(#ffffff, #e5e5e5);
    font-size: 12px;
    color: #000000;

  }

  /* 分页 */
  .page {
    width: 100%;
    position: absolute;
    right: 0;
    bottom: 60px;
    /* background: #039BE5; */
  }
</style>
<style>
  .pagination-container{
        position: fixed;
        right: 100px;
        bottom: 12px;

  }
  .pagination-container .el-pagination{
        right: 0;
        bottom: 0px;
        position: absolute;
        background-color: #FFFFFF;
        z-index: 1000;
        /* padding-bottom: 20px; */

  }
</style>
