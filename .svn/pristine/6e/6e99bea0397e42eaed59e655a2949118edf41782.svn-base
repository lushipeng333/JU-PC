<template>
  <!-- /system/user/index -->
	<div class="userControl">
		<div class="userControl_top">
			<ul>
				<li @click="aaa">新增</li>
				<li>修改</li>
				<li>删除</li>
			</ul>

		</div>
		<div class="userControl_conter">
			<div class="left">
				<div class="left_top">
					<div class="message">
						<div class="messagenav">
							查询方案
						</div>

					</div>
					<div>
						已锁定用户
					</div>
				</div>
				<div class="left_bottom">
					<div class="message">
						<div class="messagenav">
							快速查询
						</div>
					</div>

					<div class="messageli">
						<ul>
							<li>
								<p>用户编码</p>
								<el-input v-model="input1" size="mini" style="width: 160px;" class="input1"></el-input>
							</li>
							<li>

								<p>用户名称</p>
								<el-input v-model="input1" size="mini" style="width: 160px;" class="input1"></el-input>
							</li>
							<li>
								<p>所属组织</p>
								<el-input v-model="input1" size="mini" style="width: 160px;" class="input1"></el-input>
							</li>
							<li>
								<p>所属用户组</p>
								<el-input v-model="input1" size="mini" style="width: 160px;" class="input1"></el-input>
							</li>
						</ul>


					</div>
					<div class="empty" style="display: flex;justify-content: space-between; padding-left: 20px;padding-right: 70px;padding-top: 10px;">
						<div>
						清空值
					</div>
					<div>
						<button>查询	</button>
					</div>
					</div>

				</div>
			</div>
			<div class="right">
				<div class="rigtop">
					查询结果
				</div>
				<div>
					<el-table :data="userList" @selection-change="handleSelectionChange">
					          <el-table-column type="selection" width="50" align="center" />
					          <el-table-column label="用户编号" align="center" prop="userId" />
					          <el-table-column label="用户名称" align="center" prop="userName" :show-overflow-tooltip="true" />
					          <el-table-column label="用户昵称" align="center" prop="nickName" :show-overflow-tooltip="true" />
					          <el-table-column label="部门" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
					          <el-table-column label="手机号码" align="center" prop="phonenumber" width="120" />
					          <el-table-column label="状态" align="center">
					            <template slot-scope="scope">
					              <el-switch v-model="scope.row.status" active-value="0" inactive-value="1" @change="handleStatusChange(scope.row)"></el-switch>
					            </template>
					          </el-table-column>
					          <el-table-column label="创建时间" align="center" prop="createTime" width="160">
					            <!-- <template slot-scope="scope">
					              <span>{{ parseTime(scope.row.createTime) }}</span>
					            </template> -->
					          </el-table-column>
					          <el-table-column label="操作" align="center" width="180" class-name="small-padding fixed-width">
					            <template slot-scope="scope">
					              <el-button size="mini" type="text" icon="el-icon-edit" @click="handleUpdate(scope.row)" v-hasPermi="['system:user:edit']">修改</el-button>
					              <el-button v-if="scope.row.userId !== 1" size="mini" type="text" icon="el-icon-delete" @click="handleDelete(scope.row)" v-hasPermi="['system:user:remove']">删除</el-button>
					              <el-button size="mini" type="text" icon="el-icon-key" @click="handleResetPwd(scope.row)" v-hasPermi="['system:user:resetPwd']">重置</el-button>
					            </template>
					          </el-table-column>
					        </el-table>
				</div>
			</div>
		</div>
	</div>
</template>

<script>
  import {
    listUser,
    getUser,
    delUser,
    addUser,
    updateUser,
    exportUser,
    resetUserPwd,
    changeUserStatus,
    importTemplate,
  } from "@/api/system/user";
  import { getToken } from "@/utils/auth";
	export default {
		name: 'userControl',
		data(){
			return{
				input1:'',
				// 用户表格数据
				userList: null,

			}
		},
    // created() {
    //   listUser(this.addDateRange(this.queryParams, this.dateRange)).then(
    //     (response) => {
    //       this.userList = response.rows;
    //       this.total = response.total;
    //       this.loading = false;
    //       console.log(this.userList,"aas")
    //       console.log(response,"aaa")

    //     }
    //   );
    // },
			  methods: {
          /** 查询用户列表 */
             aaa() {

                listUser().then(
                  (response) => {
                    this.userList = response.rows;
                    this.total = response.total;
                
                    console.log(this.userList,"aas")
                    console.log(response,"aaa")

                  }
                );
              },
              // 用户状态修改
                  handleStatusChange(row) {
                    let text = row.status === "0" ? "启用" : "停用";
                    this.$confirm(
                      '确认要"' + text + '""' + row.userName + '"用户吗?',
                      "警告",
                      {
                        confirmButtonText: "确定",
                        cancelButtonText: "取消",
                        type: "warning",
                      }
                    )
                      .then(function () {
                        return changeUserStatus(row.userId, row.status);
                      })
                      .then(() => {
                        this.msgSuccess(text + "成功");
                      })
                      .catch(function () {
                        row.status = row.status === "0" ? "1" : "0";
                      });
                  },
                   /** 修改按钮操作 */
                      handleUpdate(row) {
                        this.reset();
                        this.getTreeselect();
                        const userId = row.userId || this.ids;
                        getUser(userId).then((response) => {
                          this.form = response.data;
                          this.postOptions = response.posts;
                          this.roleOptions = response.roles;
                          this.form.postIds = response.postIds;
                          this.form.roleIds = response.roleIds;
                          this.open = true;
                          this.title = "修改用户";
                          this.form.password = "";
                        });
                      },
                       /** 删除按钮操作 */
                          handleDelete(row) {
                            const userIds = row.userId || this.ids;
                            this.$confirm(
                              '是否确认删除用户编号为"' + userIds + '"的数据项?',
                              "警告",
                              {
                                confirmButtonText: "确定",
                                cancelButtonText: "取消",
                                type: "warning",
                              }
                            )
                              .then(function () {
                                return delUser(userIds);
                              })
                              .then(() => {
                                this.getList();
                                this.msgSuccess("删除成功");
                              })
                              .catch(function () {});
                          },
                          /** 重置密码按钮操作 */
                              handleResetPwd(row) {
                                this.$prompt('请输入"' + row.userName + '"的新密码', "提示", {
                                  confirmButtonText: "确定",
                                  cancelButtonText: "取消",
                                })
                                  .then(({ value }) => {
                                    resetUserPwd(row.userId, value).then((response) => {
                                      if (response.code === 200) {
                                        this.msgSuccess("修改成功，新密码是：" + value);
                                      }
                                    });
                                  })
                                  .catch(() => {});
                              },
          // 多选框选中数据
              handleSelectionChange(selection) {
                this.ids = selection.map((item) => item.userId);
                this.single = selection.length != 1;
                this.multiple = !selection.length;
              },
			      setCurrent(row) {
			        this.$refs.singleTable.setCurrentRow(row);
			      },
			      handleCurrentChange(val) {
			        this.currentRow = val;
			      }
			    }

	}
</script>

<style scoped="scoped">
	.userControl_top {
		background-image: linear-gradient(#5692cf, #00356c);
		height: 40px;
		width: 100%;
		margin-top: -3px;
		padding: 5px;
	}

	.userControl_top ul li {
		float: left;
		line-height: 28px;
		color: white;
		border: 1px solid #5681af;
		font-size: 12px;
		height: 28px;
		width: 58px;
		text-align: center;
		border-radius: 5px;
		background-image: linear-gradient(#71a1d2, #174f89);
		cursor: pointer;
	}

	.userControl_conter {
		background-color: #FFFFFF;
		width: 100%;
		height: 850px;
		border: 1px solid #c0c0c0;
		display: flex;
	}

	.left {
		width: 18%;
		height: 100%;
		background-color: #efefef;
		font-size: 14px;
	}

	.left_top {
		width: 100%;
		height: 40%;
	}

	.message {
		width: 100%;
		height: 30px;
		line-height: 30px;
		font-size: 12px;
		background-image: linear-gradient(#fdfdfe, #cfd0d1);
		padding-left: 10px;
		display: flex;
		justify-content: space-between;
		padding-right: 10px;

	}
	.messageli ul li{
		padding-left: 20px;
		padding-top: 10px;
		color: #000000;
	}
	.messageli ul li .input1{

	}
	.messagenav{
		color: #2a5b8c;
		font-weight: 900;

	}
	.empty div:nth-child(1){
		color: #2a5b8c;
		font-weight: 900;
	}
	.empty button{
		width: 50px;
		height: 20PX;
	}
	.right{
		width: 82%;
		height: 100%;
	}
	.rigtop{
		width: 100%;
		height: 24px;
		line-height: 24px;
		background-image: linear-gradient(#ffffff , #e5e5e5);
		font-size: 12px;
		color: #000000;
	}
</style>
