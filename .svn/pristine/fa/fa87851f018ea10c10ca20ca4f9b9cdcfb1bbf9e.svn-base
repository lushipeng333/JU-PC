<template>
	<div class="roleManagement">
		<div class="roleManagement_top">
			<ul>
				<li @click="handleAdd">新增</li>
				<li @click="handleUpdate">修改</li>
				<li @click="handleDelete">删除</li>
        <li @click="cancel">返回</li>
        <li @click="submitForm">保存</li>
			</ul>
		</div>
		<div class="roleManagement_conter">
			<div class="conter_left">
				<el-tree

          @node-click="sss"
          :highlight-current="true"
				  class="filter-tree"
				  :data="lablist"
				  :props="defaultProps"
				  :default-expand-all="false"
				  :filter-node-method="filterNode"
				  ref="tree">
				</el-tree>

			</div>
			<div class="conter_right">
				        <el-form ref="form" :model="form" :rules="rules" label-width="80px">
				          <el-row>
				            <el-col :span="24">
				              <el-form-item label="上级菜单">
				                <treeselect
				                  v-model="form.parentId"
				                  :options="menuOptions"
				                  :normalizer="normalizer"
				                  :show-count="true"
				                  placeholder="选择上级菜单"
				                />
				              </el-form-item>
				            </el-col>
				            <el-col :span="24">
				              <el-form-item label="菜单类型" prop="menuType">
				                <el-radio-group v-model="form.menuType">
				                  <el-radio label="M">目录</el-radio>
				                  <el-radio label="C">菜单</el-radio>
				                  <el-radio label="F">按钮</el-radio>
				                </el-radio-group>
				              </el-form-item>
				            </el-col>

				            <el-col :span="12">
				              <el-form-item label="菜单名称" prop="menuName">
				                <el-input v-model="form.menuName" placeholder="请输入菜单名称" />
				              </el-form-item>
				            </el-col>
				            <el-col :span="12">
				              <el-form-item label="显示排序" prop="orderNum">
				                <el-input-number v-model="form.orderNum" controls-position="right" :min="0" />
				              </el-form-item>
				            </el-col>
				            <el-col :span="12">
				              <el-form-item v-if="form.menuType != 'F'" label="路由地址" prop="path">
				                <el-input v-model="form.path" placeholder="请输入路由地址" />
				              </el-form-item>
				            </el-col>
				            <el-col :span="12" v-if="form.menuType == 'C'">
				              <el-form-item label="组件路径" prop="component">
				                <el-input v-model="form.component" placeholder="请输入组件路径" />
				              </el-form-item>
				            </el-col>
				            <el-col :span="12">
				              <el-form-item v-if="form.menuType != 'M'" label="权限标识">
				                <el-input v-model="form.perms" placeholder="请权限标识" maxlength="50" />
				              </el-form-item>
				            </el-col>
				            <el-col :span="12">
				              <el-form-item v-if="form.menuType != 'F'" label="显示状态">
				                <el-radio-group v-model="form.visible">
				                  <el-radio
				                    v-for="dict in visibleOptions"
				                    :key="dict.dictValue"
				                    :label="dict.dictValue"
				                  >{{dict.dictLabel}}</el-radio>
				                </el-radio-group>
				              </el-form-item>
				            </el-col>
				            <el-col :span="12">
				              <el-form-item v-if="form.menuType != 'F'" label="菜单状态">
				                <el-radio-group v-model="form.status">
				                  <el-radio
				                    v-for="dict in statusOptions"
				                    :key="dict.dictValue"
				                    :label="dict.dictValue"
				                  >{{dict.dictLabel}}</el-radio>
				                </el-radio-group>
				              </el-form-item>
				            </el-col>
				          </el-row>
				        </el-form>
			</div>
		</div>
	</div>
</template>

<script>
  import { listMenu, getMenu, delMenu, addMenu, updateMenu } from "@/api/system/menu";
  import Treeselect from "@riophae/vue-treeselect";
  import "@riophae/vue-treeselect/dist/vue-treeselect.css";
  import IconSelect from "@/components/IconSelect";
	 export default {
		 name:"roleManagement",
      components: { Treeselect, IconSelect },
		 data(){
			 return{

          // 遮罩层
               loading: true,
               // 显示搜索条件
               showSearch: true,
               // 菜单表格树数据
               menuList: [],
               // 菜单树选项
               menuOptions: [],
               // 弹出层标题
               title: "",
               // 是否显示弹出层
               open: false,
               // 显示状态数据字典
               visibleOptions: [],
               // 菜单状态数据字典
               statusOptions: [],
               // 查询参数
               queryParams: {
                 menuName: undefined,
                 visible: undefined
               },
               // 表单参数
               form: {},
               // 表单校验
               rules: {
                 menuName: [
                   { required: true, message: "菜单名称不能为空", trigger: "blur" }
                 ],
                 orderNum: [
                   { required: true, message: "菜单顺序不能为空", trigger: "blur" }
                 ],
                 path: [
                   { required: true, message: "路由地址不能为空", trigger: "blur" }
                 ]
               },
				 input1:'',
				 lablist:[],
				 defaultProps: {
				          children: 'children',
				          label: 'menuName'
				        }
			 }
		 },
		   watch: {
		       jueseText(val) {
		         this.$refs.tree.filter(val);
		       }
		     },

		     methods: {
           // 表单重置
               reset() {
                 this.form = {
                   menuId: undefined,
                   parentId: 0,
                   menuName: undefined,
                   icon: undefined,
                   menuType: "M",
                   orderNum: undefined,
                   isFrame: "1",
                   visible: "0",
                   status: "0"
                 };
                 this.resetForm("form");
               },
               /** 查询菜单列表 */
                   getList() {
                     this.loading = true;
                     listMenu(this.queryParams).then(response => {
                       this.menuList = this.handleTree(response.data, "menuId");
                       this.loading = false;
                       console.log( "菜单列表数据" , response)
                     });
                   },
                    /** 转换菜单数据结构 */
                       normalizer(node) {
                         if (node.children && !node.children.length) {
                           delete node.children;
                         }
                         return {
                           id: node.menuId,
                           label: node.menuName,
                           children: node.children
                         };
                       },
                       /** 提交按钮 */
                           submitForm() {
                             this.$refs["form"].validate(valid => {
                               if (valid) {
                                 if (this.form.menuId != undefined) {
                                   updateMenu(this.form).then(response => {
                                     if (response.code === 200) {
                                       this.msgSuccess("修改成功");
                                       this.open = false;
                                       this.getList();
                                     }
                                   });
                                 } else {
                                   addMenu(this.form).then(response => {
                                     if (response.code === 200) {
                                       this.msgSuccess("新增成功");
                                       this.open = false;
                                       this.getList();
                                     }
                                   });
                                 }
                               }
                             });
                           },

		       filterNode(value, data) {
		         if (!value) return true;
		         return data.label.indexOf(value) !== -1;
		       },
           cancel() {
                 this.open = false;
                 this.reset();

               },
 /** 查询菜单下拉树结构 */
    getTreeselect() {
      listMenu().then(response => {
        this.menuOptions = [];
        const menu = { menuId: 0, menuName: '主类目', children: [] };
        menu.children = this.handleTree(response.data, "menuId");
        this.menuOptions.push(menu);
      });
    },
    // 显示状态字典翻译
        visibleFormat(row, column) {
          if (row.menuType == "F") {
            return "";
          }
          return this.selectDictLabel(this.visibleOptions, row.visible);
        },
        // 菜单状态字典翻译
        statusFormat(row, column) {
          if (row.menuType == "F") {
            return "";
          }
          return this.selectDictLabel(this.statusOptions, row.status);
        },
               /** 新增按钮操作 */
                   handleAdd(row) {
                     this.reset();
                     this.getTreeselect();
                     if (row != null && row.menuId) {
                       this.form.parentId = row.menuId;
                     } else {
                       this.form.parentId = 0;
                     }
                     this.open = true;
                     this.title = "添加菜单";
                   },
                   /** 修改按钮操作 */
                       handleUpdate(row) {
                         this.reset();
                         this.getTreeselect();
                         getMenu(row.menuId).then(response => {
                           this.form = response.data;
                           this.open = true;
                           this.title = "修改菜单";
                         });
                       },
                        /** 删除按钮操作 */
                           handleDelete(row) {

                             this.$confirm('是否确认删除名称为"' + this.form.menuName + '"的数据项?', "警告", {
                                 confirmButtonText: "确定",
                                 cancelButtonText: "取消",
                                 type: "warning"
                               }).then(res => {
                                  delMenu(this.form.menuId);
                                  this.getList();
                                  this.msgSuccess("删除成功");
                               }).catch(req=>{
                                 console.log(req)
                               });

                           },
                           sss(a,b,c){
                             this.form = a
                             console.log(this.form)
                           },
                           aaa(){

                           }
		     },
         created() {
           this.getList();
               this.getDicts("sys_show_hide").then(response => {
                 this.visibleOptions = response.data;
               });
               this.getDicts("sys_normal_disable").then(response => {
                 this.statusOptions = response.data;
               });
             /** 查询菜单下拉树结构 */
                   listMenu().then(response => {
                     this.menuOptions = [];
                     const menu = { menuId: 0, menuName: '菜单列表', children: [] };
                     menu.children = this.handleTree(response.data, "menuId");
                     this.lablist.push(menu);

                     console.log("lablist",this.lablist)
                   });

           },

	   }
</script>

<style scoped="scoped">
	.roleManagement_top {
		background-image: linear-gradient(#5692cf, #00356c);
		height: 40px;
		width: 100%;
		margin-top: -3px;
		padding: 5px;
	}

	.roleManagement_top ul li {
		float: left;
		line-height: 28px;
		color: white;
		border: 1px solid #5681af;
		font-size: 12px;
		height: 28px;
		width: 58px;
		text-align: center;
		border-radius: 5px;
		background-image: linear-gradient(#71a1d2, #174f89);
		cursor: pointer;
	}
	.roleManagement_conter {
		background-color: #FFFFFF;
		width: 100%;
		height: 850px;
		border: 1px solid #c0c0c0;
		display: flex;
    overflow: auto;
	}
	.conter_left{
		width: 26%;
		height: 100%;
		border-right: 1px solid #b2b2b2;
	}
	.conter_right{
		width: 74%;
		height: 100%;

	}
	.conter_right ul li{
		float: left;
		margin-left: 20px;
		margin-top: 10px;
	}
	.ulbottom{
		margin-left: -16px;
	}
  .aaa{
     pointer-events: none;
     opacity:0.8;
  }
</style>
<style>
	.input1 .el-input__inner {
		height: 20px;
		padding-left: 5px;

	}
</style>
