<template>
  <!-- /system/user/index -->
	<div class="userControl">
		<div class="userControl_top">
			<ul v-show="show">
				<li @click="handleAdd" v-hasPermi="['system:user:add']">新增</li>
				<li :class="{'notChoose' : single}" :disabled="single" @click="handleUpdate" v-hasPermi="['system:user:edit']">修改</li>
				<li :class="{'notChoose' : multiple}" :disabled="multiple" @click="handleDelete" v-hasPermi="['system:user:remove']">删除</li>
        <li @click="handleExport" v-hasPermi="['system:user:export']">导出</li>
        <li>对比</li>
        <li>导入</li>
        <li>修改全部窗型</li>
        <li>快速添加</li>
			</ul> 
      <ul v-show="!show">
      	<li @click="submitForm">保存</li>
      	<li @click="cancel">取消</li>
      </ul>
		</div>
		<div class="userControl_conter">
      <el-form v-show="!show" ref="form" :model="form" :rules="rules" label-width="80px">
              <el-row>
                <el-col :span="12">
                  <el-form-item label="登陆账号:" prop="userName">
                    <el-input v-model="form.userName" placeholder="请输入登陆账号" />
                  </el-form-item>
                </el-col>
                <el-col :span="12">
                  <el-form-item label="归属部门:" prop="deptId">
                    <treeselect v-model="form.deptId" :options="deptOptions" :disable-branch-nodes="true" :show-count="true" placeholder="请选择归属部门" />
                  </el-form-item>
                </el-col>
              </el-row>
            </el-form>
			<div class="left" v-show="show">
        <div class="left_bottom">
        	<div class="message">
        		<div class="messagenav">
        			快速查询
        		</div>
        	</div>
        	<div class="messageli">
        		 <el-form :model="queryParams" ref="queryForm" :inline="true" v-show="showSearch" label-width="68px">
        		           <el-form-item label="登录账号:" prop="userName">
        		             <el-input v-model="queryParams.userName" placeholder="请输入用户名称" clearable size="mini" style="width: 100%" @keyup.enter.native="handleQuery" />
        		           </el-form-item>
                       <el-form-item label="姓名:" prop="nickName">
                         <el-input v-model="queryParams.nickName" placeholder="请输入用户姓名" clearable size="mini" style="width: 100%" @keyup.enter.native="handleQuery" />
                       </el-form-item>
        		           <el-form-item label="状态:" prop="status">
        		             <el-select v-model="queryParams.status" placeholder="用户状态" clearable size="mini" style="width: 100%">
        		               <el-option v-for="dict in statusOptions" :key="dict.dictValue" :label="dict.dictLabel" :value="dict.dictValue" />
        		             </el-select>
        		           </el-form-item>

        		           <el-form-item>
        		             <el-button type="cyan" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
        		             <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
        		           </el-form-item>
        		         </el-form>
        	</div>
        </div>
			</div>

			<div class="right" v-show="show">
				<div class="rigtop">
					查询结果
				</div>
					<el-table :data="userList" @selection-change="handleSelectionChange" height="100%" >
					          <el-table-column type="selection" width="50" align="center" />
                    <el-table-column label="序号" align="center" type="index" />
					          <el-table-column label="项目名称" align="center" prop="userName" :show-overflow-tooltip="true" />
					          <el-table-column label="楼号" align="center" prop="nickName" :show-overflow-tooltip="true" />
					          <el-table-column label="楼层" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
					          <el-table-column label="窗号" align="center" prop="phonenumber" width="120" />
                    <el-table-column label="窗型编号" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="窗型图片" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="位置编码" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="位置说明" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="楼层类别" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="洞口数量" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="面积(M²)" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="图纸尺寸(宽/mm)" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="图纸尺寸(高/mm)" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="洞口尺寸(宽/mm)" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="洞口尺寸(高/mm)" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
                    <el-table-column label="创建人" align="center" prop="dept.deptName" :show-overflow-tooltip="true" />
					        </el-table>
			</div>
		</div>
	</div>
</template>

<script>
  import {
    listUser,
    getUser,
    delUser,
    addUser,
    updateUser,
    exportUser,
    resetUserPwd,
    resetPwdAll,
    changeUserStatus,
    importTemplate,
  } from "@/api/system/user";
  import { getToken } from "@/utils/auth";
  import { treeselect } from "@/api/system/dept";
  import Treeselect from "@riophae/vue-treeselect";
  import "@riophae/vue-treeselect/dist/vue-treeselect.css";
	export default {
		name: 'userControl',
     components: { Treeselect },
		data(){
			return{
        ids:[],
        // 总条数
        total: 0,
				input1:'',
        // 头部导航变化
        show:true,
        // 判断是否选中
        pitchOn:false,
        // 非单个禁用
              single: true,
              // 非多个禁用
               multiple: true,
        // 部门树选项
              deptOptions: undefined,
         // 部门名称
              deptName: undefined,
              // 默认密码
              initPassword: undefined,
              // 日期范围
              dateRange: [],
              // 状态数据字典
              statusOptions: [],
              // 性别状态字典
              sexOptions: [],
              // 岗位选项
              postOptions: [],
              // 角色选项
              roleOptions: [],
        // 日期范围
              dateRange: [],
        // 显示搜索条件
              showSearch: true,
				// 用户表格数据
				userList: null,
        // 选中的数组
        userlist:[],
        listselect:{
          userId:undefined,
          userName:undefined
        },
        // 表单参数
              form: {},
              defaultProps: {
                children: "children",
                label: "label",
              },
        // 查询参数
              queryParams: {
                // pageNum: 1,
                // pageSize: 10,
                userName: undefined,
                phonenumber: undefined,
                status: undefined,
                deptId: undefined,
                nickName:undefined
              },
          // 用户导入参数
                upload: {
                  // 是否显示弹出层（用户导入）
                  open: false,
                  // 弹出层标题（用户导入）
                  title: "",
                  // 用户昵称
                  nickname:[],
                  // 用户
                  username:[],
                  // 是否禁用上传
                  isUploading: false,
                  // 是否更新已经存在的用户数据
                  updateSupport: 0,
                  // 设置上传的请求头部
                  headers: { Authorization: "Bearer " + getToken() },
                  // 上传的地址
                  url: process.env.VUE_APP_BASE_API + "/system/user/importData",
                },
              // 表单校验
                    rules: {
                      userName: [
                        { required: true, message: "用户名称不能为空", trigger: "blur" },
                      ],
                      nickName: [
                        { required: true, message: "用户昵称不能为空", trigger: "blur" },
                      ],
                      deptId: [
                        { required: true, message: "归属部门不能为空", trigger: "blur" },
                      ],
                      password: [
                        { required: true, message: "用户密码不能为空", trigger: "blur" },
                      ],
                      email: [
                        { required: true, message: "邮箱地址不能为空", trigger: "blur" },
                        {
                          type: "email",
                          message: "'请输入正确的邮箱地址",
                          trigger: ["blur", "change"],
                        },
                      ],
                      phonenumber: [
                        { required: true, message: "手机号码不能为空", trigger: "blur" },
                        {
                          pattern: /^1[3|4|5|6|7|8|9][0-9]\d{8}$/,
                          message: "请输入正确的手机号码",
                          trigger: "blur",
                        },
                      ],
                    },
                    // 存放选中数组
                    selectList:[],


			}
		},
      created() {
        this.getList();
        this.getTreeselect();
        this.getDicts("sys_normal_disable").then((response) => {
          this.statusOptions = response.data;
        });
        this.getDicts("sys_user_sex").then((response) => {
          this.sexOptions = response.data;
        });
        this.getConfigKey("sys.user.initPassword").then((response) => {
          this.initPassword = response.msg;
        });
      },
			  methods: {
          // 表单重置
              reset() {
                this.form = {
                  userId: undefined,
                  deptId: undefined,
                  userName: undefined,
                  nickName: undefined,
                  password: undefined,
                  phonenumber: undefined,
                  email: undefined,
                  sex: undefined,
                  status: "0",
                  remark: undefined,
                  postIds: [],
                  roleIds: [],
                };
                this.resetForm("form");
              },

              /** 查询部门下拉树结构 */
                  getTreeselect() {
                    treeselect().then((response) => {
                      this.deptOptions = response.data;
                    });
                  },
                  // 筛选节点
                      filterNode(value, data) {
                        if (!value) return true;
                        return data.label.indexOf(value) !== -1;
                      },
            /** 搜索按钮操作 */
              handleQuery() {
                this.getList();
              },
           /** 重置按钮操作 */
              resetQuery() {
                this.dateRange = [];
                this.resetForm("queryForm");
                this.handleQuery();
              },
              /** 新增按钮操作 */
                  handleAdd() {
                    this.show = false
                    this.reset();
                    this.getTreeselect();
                    getUser().then((response) => {
                      this.postOptions = response.posts;
                      this.roleOptions = response.roles;
                      this.form.password = this.initPassword;
                    });
                  },
          /** 查询用户列表 */
             getList() {
                listUser(this.addDateRange(this.queryParams, this.dateRange)).then(
                  (response) => {
                    this.userList = response.rows;
                    this.total = response.total;
                    console.log(this.total)

                  }
                );
              },
              // 节点单击事件
                  handleNodeClick(data) {
                    console.log(data)
                    this.queryParams.deptId = data.id;
                    this.getList();
                  },
              // 多选框选中数据
                  handleSelectionChange(selection) {
                    this.ids = selection.map((item) => item.userId);
                    this.username = selection.map((item) => item.userName);
                    this.nickname = selection.map((item) => item.nickName);
                    this.single = selection.length != 1;
                    this.multiple = !selection.length;
                    if(selection.length == 1){
                      for(let i = 0 ; i < selection.length ; i ++ ){
                      this.listselect.userId = selection[i].userId
                      this.listselect.userName = selection[i].userName
                    }
                    }else {
                      this.listselect = {}
                    }
                    // console.log( selection)
                    if(selection.length > 0){
                      let sele = []
                     for(let i = 0 ; i < selection.length ; i ++ ){
                        let qqq  = {}
                        qqq.userId = selection[i].userId
                         qqq.userName = selection[i].userName
                         sele.push(qqq)
                     }
                     console.log(sele,"11")
                  this.selectList  = sele
                    }
                  },
              // 用户状态修改
                  handleStatusChange(row) {
                    let text = row.status === "0" ? "启用" : "停用";
                    this.$confirm(
                      '确认要"' + text + '""' + row.userName + '"用户吗?',
                      "警告",
                      {
                        confirmButtonText: "确定",
                        cancelButtonText: "取消",
                        type: "warning",
                      }
                    )
                      .then(function () {
                        return changeUserStatus(row.userId, row.status);
                      })
                      .then(() => {
                        this.msgSuccess(text + "成功");
                      })
                      .catch(function () {
                        row.status = row.status === "0" ? "1" : "0";
                      });
                  },
                   /** 修改按钮操作 */
                      handleUpdate(row) {

                        this.reset();
                        this.getTreeselect();
                        const userId = row.userId || this.ids;
                        getUser(userId).then((response) => {
                          console.log(response)
                          this.form = response.data;
                          this.postOptions = response.posts;
                          this.roleOptions = response.roles;
                          this.form.postIds = response.postIds;
                          this.form.roleIds = response.roleIds;
                          this.form.nickName = response.nickName
                          this.form.password = "";
                          this.show = false
                        });
                      },
                       /** 删除按钮操作 */
                          handleDelete(row) {
                            const userIds = row.userId || this.ids;
                            this.$confirm(
                              '是否确认删除用户昵称为"' + this.nickname + '"的数据项?',
                              "警告",
                              {
                                confirmButtonText: "确定",
                                cancelButtonText: "取消",
                                type: "warning",
                              }
                            )
                              .then(function () {
                                return delUser(userIds);
                              })
                              .then(() => {
                                this.getList();
                                this.msgSuccess("删除成功");
                              })
                              .catch(function () {});
                          },
                          /** 导出按钮操作 */
                              handleExport() {
                                const queryParams = this.queryParams;
                                this.$confirm("是否确认导出所有用户数据项?", "警告", {
                                  confirmButtonText: "确定",
                                  cancelButtonText: "取消",
                                  type: "warning",
                                })
                                  .then(function () {
                                    return exportUser(queryParams);
                                  })
                                  .then((response) => {
                                    this.download(response.msg);
                                  })
                                  .catch(function () {});
                              },
                          /** 重置密码按钮操作 */
                              handleResetPwd(row) {
                                // if (this.selectList)

                                const userIds = row.userId || this.ids;
                                // [
                                //   {userId:undefined , userName:undefined}
                                // ]
                                if(this.ids == []){
                                  this.$confirm( '至少选中一行数据' ,{
                                    confirmButtonText: '确定',
                                    cancelButtonText: '取消',
                                    type: 'warning',
                                  })
                                }else if(this.ids.length > 0 && this.ids.length < 2){
                                  this.$prompt('请输入"' + this.username + '"的新密码', "提示", {
                                  confirmButtonText: "确定",
                                  cancelButtonText: "取消",
                                })
                                  .then(({ value }) => {
                                    resetUserPwd(this.listselect.userId, value).then((response) => {
                                      if (response.code === 200) {
                                        this.msgSuccess("修改成功，新密码是：" + value);
                                      }
                                    });
                                  })
                                  .catch(() => {});
                                }else if(this.ids.length > 0){
                                  this.$confirm('是否重置所有密码?', '警告', {
                                            confirmButtonText: '确定',
                                            cancelButtonText: '取消',
                                            type: 'warning'
                                          })
                                    .then(() => {
                                       resetPwdAll(this.selectList);
                                      this.msgSuccess("重置成功");
                                    })
                                    .catch(function () {});
                                }

                              },

              /** 提交按钮 */
                 submitForm: function () {
                   this.$refs["form"].validate((valid) => {
                     if (valid) {
                       if (this.form.userId != undefined) {
                         updateUser(this.form).then((response) => {
                           if (response.code === 200) {
                             this.msgSuccess("修改成功");
                             this.getList();
                             this.show = true
                           }
                         });
                       } else {
                         addUser(this.form).then((response) => {
                           if (response.code === 200) {
                             this.msgSuccess("新增成功");
                             this.getList();
                             this.show = true
                           }
                         });
                       }
                     }
                   });
                 },
                  cancel() {
                        this.reset();
                        this.show = true
                      },

			      setCurrent(row) {
			        this.$refs.singleTable.setCurrentRow(row);
			      },
			      handleCurrentChange(val) {
			        this.currentRow = val;
			      }
			    }

	}
</script>

<style scoped="scoped">
  /* 删除修改按钮是否操作 */
  .notChoose{
    opacity: 0.8;
    pointer-events:none;
  }
  .userControl{
    width: 100%;
    height: 100%;
  }
	.userControl_top {
		background-image: linear-gradient(#5692cf, #00356c);
		height: 40px;
		width: 100%;

		padding: 5px;
	}

	.userControl_top ul li {
		float: left;
		line-height: 28px;
		color: white;
		border: 1px solid #5681af;
		font-size: 12px;
		height: 28px;
		width: 58px;
		text-align: center;
		border-radius: 5px;
		background-image: linear-gradient(#71a1d2, #174f89);
		cursor: pointer;
	}

	.userControl_conter {
		background-color: #FFFFFF;
		width: 100%;
		height: 100%;
		border: 1px solid #c0c0c0;
		display: flex;
	}

	.left {
		width: 16%;
		height: 100%;
		background-color: #efefef;
		font-size: 14px;
	}

	.left_top {
		width: 100%;
		height: 40%;
    background: #FFFFFF;
    overflow: auto;
	}
.left_bottom{
  width: 100%;
  height: 40%;
}
	.message {
		width: 100%;
		height: 30px;
		line-height: 30px;
		font-size: 12px;
		background-image: linear-gradient(#fdfdfe, #cfd0d1);
		padding-left: 10px;
		display: flex;
		justify-content: space-between;
		padding-right: 10px;

	}
	.messageli{

  }

	.messagenav{
		color: #2a5b8c;
		font-weight: 900;

	}
	.empty div:nth-child(1){
		color: #2a5b8c;
		font-weight: 900;
	}
	.empty button{
		width: 50px;
		height: 20PX;
	}
	.right{
		width: 84%;
		height: 82%;
    /* overflow: auto; */
    background: red;
	}
	.rigtop{
		width: 100%;
		height: 24px;
		line-height: 24px;
		background-image: linear-gradient(#ffffff , #e5e5e5);
		font-size: 12px;
		color: #000000;
	}
  .contop {
  	width: 100%;
  	height: 30px;
  	background-image: linear-gradient(#ffffff, #e6e5e6);
  	padding-top: 5px;
  	padding-left: 20px;
  }
  .contop button {
  	width: 60px;
  	height: 20px;
  	font-size: 12px;
  	border: 1px solid #cacaca;
  	border-radius: 10px 0px 10px 0px;
  	color: #000000;
  	outline: none;
  }
  .contop button:hover {
  	background: #c5e1ff;
  }

</style>
<style>
  .el-input__inner{
    width: 100%;
  }
  .el-form-item{
      margin: 0;
  }
  .el-form--inline .el-form-item__label{
    display: flex;
  }
  .el-form-item__label{
   padding-right: 0px;
   /* padding-top: 10px; */
  }
  .el-form,.el-form--inline{
    padding-left: 5px;
    padding-right: 5px;
  }
 .el-row{
    padding-top: 20px;
  }
  .pagination-container {
    position: fixed;
    right: 100px;
    bottom: 12px;

  }

  .pagination-container .el-pagination {
    right: 0;
    bottom: 0px;
    position: absolute;
    background-color: #FFFFFF;
    z-index: 1000;
    /* padding-bottom: 20px; */

  }
</style>
